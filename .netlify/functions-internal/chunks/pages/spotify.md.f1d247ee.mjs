/* empty css                         */import { h as createVNode, i as spreadAttributes, F as Fragment } from '../astro.671be3f2.mjs';
import { $ as $$BaseLayout } from './spotify-api.md.1b3af1ce.mjs';
import './index.astro.6c5fd2f4.mjs';
import 'date-fns';
import 'date-fns/locale';
/* empty css                                 */
const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="([^"]+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<p>Apprends comment utiliser l’API de Spotify pour récupérer le morceau actuellement en lecture sur ton compte. Ce guide te montrera étape par étape comment interagir avec l’API de Spotify pour obtenir des informations sur la chanson que tu écoutes actuellement, y compris le titre et l’artiste.</p>\n<p>Avant de commencer, il te faut :</p>\n<ul>\n<li><a href=\"https://developer.spotify.com/\">Tes clés api spotify</a></li>\n<li><a href=\"https://www.cloudflare.com/fr-fr/\">Avoir un compte cloudflare</a>(facultatif)</li>\n</ul>\n<p>Une fois tes clés obtenues, tu peux te rendre sur le site <a href=\"https://www.base64encode.org/\">base64decode</a> pour encoder tes clés API comme ça :\n<img src=\"https://res.cloudinary.com/decneq2aj/image/upload/v1693247663/Capture_d_e%CC%81cran_2023-08-28_a%CC%80_20.33.17_kfhllq.png\" alt=\"image\"></p>\n<p>Ensuite, il faudra faire une requête avec ton client_id et ton redirect_uri que tu as configurés sur ton dashboard Spotify :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #e1e4e8\">https://accounts.spotify.com/authorize?client_id=TON_CLIENT_ID&#x26;response_type=code&#x26;redirect_uri=http://localhost:5173/callback&#x26;scope=user-read-currently-playing</span></span></code></pre>\n<p>Cette requête va te rediriger sur ton callback uri avec un code. Il te faudra le récupérer et faire une deuxième requête curl :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #e1e4e8\">curl -H \"Authorization: Basic &#x3C;la base 64 de ton code>\" -d grant_type=authorization_code -d code=&#x3C;le code de ton callback url> -d redirect_uri=http%3A%2F%2Flocalhost:5173/callback https://accounts.spotify.com/api/token</span></span></code></pre>\n<p>Tu auras une réponse de ce type :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">\"access_token\"</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #9ECBFF\">\"xxxx\"</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">\"token_type\"</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #9ECBFF\">\"Bearer\"</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">\"expires_in\"</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">3600</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">\"refresh_token\"</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #9ECBFF\">\"xxx\"</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #79B8FF\">\"scope\"</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #9ECBFF\">\"user-read-currently-playing\"</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>Tu auras juste à récupérer le <strong>refresh_token</strong>.</p>\n<p>Tu devrais normalement avoir 2 clés :</p>\n<ul>\n<li><strong>SPOTIFY_BASE_64</strong>: la base 64 de ta clé client_id et client_secret</li>\n<li><strong>SPOTIFY_REFRESH_TOKEN</strong>: le refresh token que tu as récupéré juste avant</li>\n</ul>\n<h3 id=\"récaputilatifs\">Récaputilatifs</h3>\n<ul>\n<li>Tu as récupéré tes clés API Spotify.</li>\n<li>Tu as encodé tes clés API en base 64.</li>\n<li>Tu as fait une requête à l’API de Spotify avec ton client_id, redirect_uri et un <a href=\"https://developer.spotify.com/documentation/web-api/concepts/scopes\">scope</a> supplémentaire : user-read-currently-playing. Ce scope te permet de récupérer la chanson en cours d’écoute. Tu peux combiner les scopes, par exemple ajouter user-top-read pour récupérer tes meilleures écoutes sur Spotify.</li>\n<li>Tu as fait une requête curl pour récupérer le refresh token.</li>\n</ul>\n<h3 id=\"création-de-lendpoint\">Création de l’endpoint</h3>\n<p>Dans cette section, nous allons créer un <strong>endpoint</strong> pour récupérer la chanson que tu écoutes actuellement en utilisant un appel <strong>ajax</strong>.</p>\n<p>J’ai choisi d’utiliser Cloudflare Workers pour déployer mon API et le framework <a href=\"https://hono.dev/\">honojs</a> pour la créer. Cependant, tu peux utiliser n’importe quel framework backend de ton choix, comme Node.js ou Next.js.</p>\n<p>Si tu choisis d’utiliser <strong>honojs</strong>, commence par initialiser le projet avec cette commande :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #e1e4e8\">pnpm create hono@latest le_nom_du_projet</span></span></code></pre>\n<p>On te demandera ensuite quel template tu souhaites utiliser. Assure-toi de sélectionner cloudflare-workers.\n<img src=\"https://res.cloudinary.com/decneq2aj/image/upload/v1693327585/Capture_d_e%CC%81cran_2023-08-29_a%CC%80_18.45.02_curtil.png\" alt=\"terminal\"></p>\n<p>Puis, ouvre le fichier wrangler.toml et modifie-le comme ceci :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #e1e4e8\">name = \"le_nom_de_ton_projet\"</span></span>\n<span class=\"line\"><span style=\"color: #e1e4e8\">compatibility_date = \"2023-08-15\"</span></span></code></pre>\n<p>Utilise ensuite la commande <strong>wrangler login</strong> pour te connecter à ton compte Cloudflare et déployer ton projet.</p>\n<p>Maintenant, crée un fichier <strong>spotify.ts</strong> et ajoute ce morceau de code :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getAccessToken</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> ()</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Promise</span><span style=\"color: #E1E4E8\">&#x3C;{ </span><span style=\"color: #FFAB70\">access_token</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\"> }> </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">refresh_token</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'Ton refresh token'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">fetch</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'https://accounts.spotify.com/api/token'</span><span style=\"color: #E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    method: </span><span style=\"color: #9ECBFF\">'POST'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    headers: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      Authorization: </span><span style=\"color: #9ECBFF\">`Basic Ton code basic64`</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'Content-Type'</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #9ECBFF\">'application/x-www-form-urlencoded'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    body: </span><span style=\"color: #F97583\">new</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">URLSearchParams</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      grant_type: </span><span style=\"color: #9ECBFF\">'refresh_token'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      refresh_token,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> response.</span><span style=\"color: #B392F0\">json</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>Ce code contient une fonction asynchrone appelée <strong>getAccessToken</strong> qui fait un appel <strong>ajax</strong> pour récupérer ton access token, dont tu auras besoin.</p>\n<p>Toujours dans le fichier <strong>spotify.ts</strong>, ajoute ce morceau de code :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getAccessToken</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> ()</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Promise</span><span style=\"color: #E1E4E8\">&#x3C;{ </span><span style=\"color: #FFAB70\">access_token</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\"> }> </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">//...</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">currentlyPlayingSong</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #79B8FF\">access_token</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getAccessToken</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">fetch</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'https://api.spotify.com/v1/me/player/currently-playing'</span><span style=\"color: #E1E4E8\">, {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    headers: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      Authorization: </span><span style=\"color: #9ECBFF\">`Bearer ${</span><span style=\"color: #E1E4E8\">access_token</span><span style=\"color: #9ECBFF\">}`</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>Dans cette fonction, on rappelle notre première fonction <strong>getAccessToken</strong> pour récupérer notre <strong>access_token</strong> et faire notre appel <strong>ajax</strong> juste après sur l’api de Spotify, avec notre <strong>access_token</strong> en tant que Bearer token dans l’en-tête de la requête <strong>ajax</strong>.</p>\n<p>Maintenant, tu peux aller dans le fichier <strong>index.ts</strong> le fichier principal de ton projet, et importer ta fonction <strong>currentlyPlayingSong</strong></p>\n<p>Ton fichier de base doit ressembler à ça :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { Hono } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'hono'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { currentlyPlayingSong } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'./lib/spotify.ts'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">app</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Hono</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">app.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'/'</span><span style=\"color: #E1E4E8\">, (</span><span style=\"color: #FFAB70\">c</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> c.</span><span style=\"color: #B392F0\">text</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'Hono!'</span><span style=\"color: #E1E4E8\">))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">default</span><span style=\"color: #E1E4E8\"> app</span></span></code></pre>\n<p>De mon côté, je vais mettre en place le <strong>CORS</strong> pour éviter qu’un autre site puisse accéder à mon <strong>api</strong>, et je configure aussi les méthodes autorisées. Pour nous, un simple <strong>GET</strong> suffira. Je liste mes domaines comme ceci :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A737D\">//...</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { cors } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'hono/cors'</span></span>\n<span class=\"line\"><span style=\"color: #6A737D\">//...</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">app</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">new</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Hono</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">app.</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #9ECBFF\">'*'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">cors</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    origin: [</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'xxxx'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'xxxx'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'https://www.dereje.cyou'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'http://localhost:5173'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #9ECBFF\">'http://localhost:3000'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #6A737D\">// autre sites...</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    allowHeaders: [</span><span style=\"color: #9ECBFF\">'Content-Type'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'Access-Control-Allow-Origin'</span><span style=\"color: #E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    allowMethods: [</span><span style=\"color: #9ECBFF\">'GET'</span><span style=\"color: #E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    exposeHeaders: [</span><span style=\"color: #9ECBFF\">'Content-Length'</span><span style=\"color: #E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">app.</span><span style=\"color: #B392F0\">options</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'*'</span><span style=\"color: #E1E4E8\">, (</span><span style=\"color: #FFAB70\">c</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> c.</span><span style=\"color: #B392F0\">text</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">''</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">204</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<p>Ensuite, on peut commencer à créer notre route. Pour ma part, je n’ai pas cherché à compliquer les choses, j’utilise la racine de l’URL :</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #E1E4E8\">app.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'/'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">c</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">currentlyPlayingSong</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(data.status </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">204</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">||</span><span style=\"color: #E1E4E8\"> data.status </span><span style=\"color: #F97583\">></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">400</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">       </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> c.</span><span style=\"color: #B392F0\">json</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">           isPlaying: </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">       },{</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">           status: </span><span style=\"color: #79B8FF\">200</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">       })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">song</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> data.</span><span style=\"color: #B392F0\">json</span><span style=\"color: #E1E4E8\">() </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">any</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (song.item </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> c.</span><span style=\"color: #B392F0\">json</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            isPlaying: </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        },{</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            status: </span><span style=\"color: #79B8FF\">200</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">current_song</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        title: song.item.name,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        artist: song.item.artists.</span><span style=\"color: #B392F0\">map</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">_artist</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">any</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> _artist.name).</span><span style=\"color: #B392F0\">join</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">', '</span><span style=\"color: #E1E4E8\">),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        song_url: song.item.external_urls.spotify,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    };</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> c.</span><span style=\"color: #B392F0\">json</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        current_song</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>Dans ce code, je récupère la chanson en cours de lecture sur Spotify et je vérifie aussi si le statut que je reçois est strictement égal à 204 ou supérieur à 400. Dans ce cas, j’envoie une réponse JSON avec isPlaying à false et un statut à 200. Je refais la même chose si la chanson est à null. Ensuite, je crée un objet qui contiendra les informations dont j’ai besoin : le titre de la chanson, l’artiste et l’URL de la chanson. Si tu veux récupérer d’autres informations, fais simplement un console.log de la chanson pour voir ce que tu obtiens, il y a pas mal de données.</p>\n<p>Pour finir, tu dois exécuter la commande suivante et te rendre sur ton tableau de bord Cloudflare, à la page <strong>Workers et Pages</strong></p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #e1e4e8\">wrangler deploy --minify src/index.ts</span></span></code></pre>\n<p>Normalement, tu verras ton worker dans la liste de tes projets :\n<img src=\"https://res.cloudinary.com/decneq2aj/image/upload/v1693332062/Capture_d_e%CC%81cran_2023-08-29_a%CC%80_19.57.15_cpdhgb.png\" alt=\"projets\">\nPour mon cas c’est le projets : <strong>api-spotify-song</strong></p>\n<p>L’avantage de cette approche, c’est que je n’ai plus à me soucier de créer une route api dans mes futurs projets. Je n’ai qu’à faire un appel <strong>ajax</strong> sur mon api et récupérer les données. Pour personnaliser davantage, il est très facile d’ajouter un domaine personnalisé pour son api.</p>");

				const frontmatter = {"layout":"../../layouts/BaseLayout.astro","title":"Obtenir le Morceau Actuel depuis l'API Spotify","description":"Apprends comment utiliser l'API de Spotify pour récupérer le morceau actuellement en lecture sur ton compte. Ce guide te montrera étape par étape comment interagir avec l'API de Spotify pour obtenir des informations sur la chanson que tu écoutes actuellement, y compris le titre et l'artiste","date":"2023-08-28T00:00:00.000Z"};
				const file = "/Users/getutadesse/mportfolio/src/pages/post/spotify.md";
				const url = "/post/spotify";
				function rawContent() {
					return "\nApprends comment utiliser l'API de Spotify pour récupérer le morceau actuellement en lecture sur ton compte. Ce guide te montrera étape par étape comment interagir avec l'API de Spotify pour obtenir des informations sur la chanson que tu écoutes actuellement, y compris le titre et l'artiste.\n\nAvant de commencer, il te faut :\n\n- [Tes clés api spotify](https://developer.spotify.com/)\n- [Avoir un compte cloudflare](https://www.cloudflare.com/fr-fr/)(facultatif)\n\nUne fois tes clés obtenues, tu peux te rendre sur le site [base64decode](https://www.base64encode.org/) pour encoder tes clés API comme ça :\n![image](https://res.cloudinary.com/decneq2aj/image/upload/v1693247663/Capture_d_e%CC%81cran_2023-08-28_a%CC%80_20.33.17_kfhllq.png)\n\nEnsuite, il faudra faire une requête avec ton client_id et ton redirect_uri que tu as configurés sur ton dashboard Spotify :\n\n```\nhttps://accounts.spotify.com/authorize?client_id=TON_CLIENT_ID&response_type=code&redirect_uri=http://localhost:5173/callback&scope=user-read-currently-playing\n```\n\nCette requête va te rediriger sur ton callback uri avec un code. Il te faudra le récupérer et faire une deuxième requête curl :\n\n```\ncurl -H \"Authorization: Basic <la base 64 de ton code>\" -d grant_type=authorization_code -d code=<le code de ton callback url> -d redirect_uri=http%3A%2F%2Flocalhost:5173/callback https://accounts.spotify.com/api/token\n```\n\nTu auras une réponse de ce type :\n\n```json\n{\n  \"access_token\": \"xxxx\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"refresh_token\": \"xxx\",\n  \"scope\": \"user-read-currently-playing\"\n}\n```\n\nTu auras juste à récupérer le **refresh_token**.\n\nTu devrais normalement avoir 2 clés :\n\n- **SPOTIFY_BASE_64**: la base 64 de ta clé client_id et client_secret\n- **SPOTIFY_REFRESH_TOKEN**: le refresh token que tu as récupéré juste avant\n\n### Récaputilatifs\n\n- Tu as récupéré tes clés API Spotify.\n- Tu as encodé tes clés API en base 64.\n- Tu as fait une requête à l'API de Spotify avec ton client_id, redirect_uri et un [scope](https://developer.spotify.com/documentation/web-api/concepts/scopes) supplémentaire : user-read-currently-playing. Ce scope te permet de récupérer la chanson en cours d'écoute. Tu peux combiner les scopes, par exemple ajouter user-top-read pour récupérer tes meilleures écoutes sur Spotify.\n- Tu as fait une requête curl pour récupérer le refresh token.\n\n### Création de l'endpoint\n\nDans cette section, nous allons créer un **endpoint** pour récupérer la chanson que tu écoutes actuellement en utilisant un appel **ajax**.\n\nJ'ai choisi d'utiliser Cloudflare Workers pour déployer mon API et le framework [honojs](https://hono.dev/) pour la créer. Cependant, tu peux utiliser n'importe quel framework backend de ton choix, comme Node.js ou Next.js.\n\nSi tu choisis d'utiliser **honojs**, commence par initialiser le projet avec cette commande :\n\n```\npnpm create hono@latest le_nom_du_projet\n```\n\nOn te demandera ensuite quel template tu souhaites utiliser. Assure-toi de sélectionner cloudflare-workers.\n![terminal](https://res.cloudinary.com/decneq2aj/image/upload/v1693327585/Capture_d_e%CC%81cran_2023-08-29_a%CC%80_18.45.02_curtil.png)\n\nPuis, ouvre le fichier wrangler.toml et modifie-le comme ceci :\n\n```\nname = \"le_nom_de_ton_projet\"\ncompatibility_date = \"2023-08-15\"\n```\n\nUtilise ensuite la commande **wrangler login** pour te connecter à ton compte Cloudflare et déployer ton projet.\n\nMaintenant, crée un fichier **spotify.ts** et ajoute ce morceau de code :\n\n```ts\nexport const getAccessToken = async (): Promise<{ access_token: string }> => {\n  const refresh_token: string = 'Ton refresh token'\n\n  const response = await fetch('https://accounts.spotify.com/api/token', {\n    method: 'POST',\n    headers: {\n      Authorization: `Basic Ton code basic64`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token,\n    }),\n  })\n\n  return response.json()\n}\n```\n\nCe code contient une fonction asynchrone appelée **getAccessToken** qui fait un appel **ajax** pour récupérer ton access token, dont tu auras besoin.\n\nToujours dans le fichier **spotify.ts**, ajoute ce morceau de code :\n\n```ts\nexport const getAccessToken = async (): Promise<{ access_token: string }> => {\n  //...\n}\n\nexport const currentlyPlayingSong = async () => {\n  const { access_token } = await getAccessToken()\n\n  return fetch('https://api.spotify.com/v1/me/player/currently-playing', {\n    headers: {\n      Authorization: `Bearer ${access_token}`,\n    },\n  })\n}\n```\n\nDans cette fonction, on rappelle notre première fonction **getAccessToken** pour récupérer notre **access_token** et faire notre appel **ajax** juste après sur l'api de Spotify, avec notre **access_token** en tant que Bearer token dans l'en-tête de la requête **ajax**.\n\nMaintenant, tu peux aller dans le fichier **index.ts** le fichier principal de ton projet, et importer ta fonction **currentlyPlayingSong**\n\nTon fichier de base doit ressembler à ça :\n\n```ts\nimport { Hono } from 'hono'\nimport { currentlyPlayingSong } from './lib/spotify.ts'\nconst app = new Hono()\n\napp.get('/', (c) => c.text('Hono!'))\n\nexport default app\n```\n\nDe mon côté, je vais mettre en place le **CORS** pour éviter qu'un autre site puisse accéder à mon **api**, et je configure aussi les méthodes autorisées. Pour nous, un simple **GET** suffira. Je liste mes domaines comme ceci :\n\n```ts\n//...\nimport { cors } from 'hono/cors'\n//...\nconst app = new Hono()\n\napp.use(\n  '*',\n  cors({\n    origin: [\n      'xxxx',\n      'xxxx',\n      'https://www.dereje.cyou',\n      'http://localhost:5173',\n      'http://localhost:3000',\n      // autre sites...\n    ],\n    allowHeaders: ['Content-Type', 'Access-Control-Allow-Origin'],\n    allowMethods: ['GET'],\n    exposeHeaders: ['Content-Length'],\n  })\n)\n\napp.options('*', (c) => {\n  return c.text('', 204)\n})\n```\n\nEnsuite, on peut commencer à créer notre route. Pour ma part, je n'ai pas cherché à compliquer les choses, j'utilise la racine de l'URL :\n\n```ts\napp.get('/', async (c) => {\n    const data = await currentlyPlayingSong()\n    if(data.status === 204 || data.status > 400) {\n       return c.json({\n           isPlaying: false,\n       },{\n           status: 200\n       })\n    }\n    const song = await data.json() as any\n\n    if (song.item === null) {\n        return c.json({\n            isPlaying: false,\n        },{\n            status: 200\n        })\n    }\n\n    const current_song = {\n        title: song.item.name,\n        artist: song.item.artists.map((_artist: any) => _artist.name).join(', '),\n        song_url: song.item.external_urls.spotify,\n    };\n\n\n    return c.json({\n        current_song\n    })\n}\n```\n\nDans ce code, je récupère la chanson en cours de lecture sur Spotify et je vérifie aussi si le statut que je reçois est strictement égal à 204 ou supérieur à 400. Dans ce cas, j'envoie une réponse JSON avec isPlaying à false et un statut à 200. Je refais la même chose si la chanson est à null. Ensuite, je crée un objet qui contiendra les informations dont j'ai besoin : le titre de la chanson, l'artiste et l'URL de la chanson. Si tu veux récupérer d'autres informations, fais simplement un console.log de la chanson pour voir ce que tu obtiens, il y a pas mal de données.\n\nPour finir, tu dois exécuter la commande suivante et te rendre sur ton tableau de bord Cloudflare, à la page **Workers et Pages**\n\n```\nwrangler deploy --minify src/index.ts\n```\n\nNormalement, tu verras ton worker dans la liste de tes projets :\n![projets](https://res.cloudinary.com/decneq2aj/image/upload/v1693332062/Capture_d_e%CC%81cran_2023-08-29_a%CC%80_19.57.15_cpdhgb.png)\nPour mon cas c'est le projets : **api-spotify-song**\n\nL'avantage de cette approche, c'est que je n'ai plus à me soucier de créer une route api dans mes futurs projets. Je n'ai qu'à faire un appel **ajax** sur mon api et récupérer les données. Pour personnaliser davantage, il est très facile d'ajouter un domaine personnalisé pour son api.\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":3,"slug":"récaputilatifs","text":"Récaputilatifs"},{"depth":3,"slug":"création-de-lendpoint","text":"Création de l’endpoint"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return createVNode($$BaseLayout, {
									file,
									url,
									content,
									frontmatter: content,
									headings: getHeadings(),
									rawContent,
									compiledContent,
									'server:root': true,
									children: contentFragment
								});
				}
				Content[Symbol.for('astro.needsHeadRendering')] = false;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
